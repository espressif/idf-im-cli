name: Autotest

on:
    workflow_call:
        inputs:
            run_id:
                required: true
                type: string
            ref:
                required: true
                type: string

jobs:
    test:
        name: Automated test scripts
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-latest
                      package_name: linux-x64
                      run_on: GitHub
                    - os: windows-latest
                      package_name: windows-x64
                      run_on: GitHub
                    - os: macos-latest
                      package_name: macos-aarch64
                      run_on: GitHub
                    - os: ubuntu-latest
                      package_name: linux-x64
                      run_on: CNRunner

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ inputs.ref }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Get CLI application version number (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  git fetch --tags
                  LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
                  STRIPPED_TAG=${LATEST_TAG#v}
                  echo "CLI_TAG=$STRIPPED_TAG" >> $GITHUB_ENV

            - name: Fetch latest IDF release
              if: runner.os != 'Windows'
              run: |
                  curl -v -s https://api.github.com/repos/espressif/esp-idf/releases/latest > IDF_latest_release.json
                  cat IDF_latest_release.json
                  IDF_TAG=$(jq -r .tag_name IDF_latest_release.json)
                  echo "IDF_TAG=$IDF_TAG" >> $GITHUB_ENV
                  echo "Latest IDF for default install: $IDF_TAG"

            - name: Extract artifact (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  mkdir -p test-bin
                  unzip ./artifacts/eim-${{ inputs.run_id }}-${{ matrix.package_name }}/eim.zip -d test-bin
                  # unzip ./test-bin/eim.zip -d test-bin

            - name: Set executable permissions (non-Windows)
              id: set-executable-permissions-non-windows
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./test-bin/eim

            - name: Run prerequisites test script (non-Windows), skip for CNRunner
              id: pre-test-non-windows
              if: runner.os != 'Windows' && matrix.run_on != 'CNRunner'
              run: |
                  export LOG_TO_FILE="true"
                  export EIM_FILE_PATH="../test-bin/eim"
                  export EIM_VERSION="eim ${{ env.CLI_TAG }}"
                  cd tests
                  npm ci
                  npm run pre-test

            - name: Install dependencies (Ubuntu)
              id: install-deps-ubuntu
              if: |
                  runner.os == 'Linux' &&
                  (success() || steps.pre-test-non-windows.outcome == 'failure' &&
                  steps.set-executable-permissions-non-windows.outcome == 'success')
              run: |
                  sudo apt-get install -y git cmake ninja-build wget flex bison gperf ccache libffi-dev libssl-dev dfu-util libusb-1.0-0-dev python3 python3-venv python3-pip

            - name: Install dependencies (MacOS)
              id: install-deps-macos
              if: |
                  runner.os == 'macOS' &&
                  (success() || steps.pre-test-non-windows.outcome == 'failure' &&
                  steps.set-executable-permissions-non-windows.outcome == 'success')
              run: |
                  brew install cmake ninja dfu-util

            - name: Run IDF basic install test script (non-Windows)
              id: basic-test-non-windows
              if: |
                  runner.os != 'Windows' && 
                  matrix.run_on != 'CNRunner' &&
                  (steps.install-deps-ubuntu.outcome == 'success' ||
                  steps.install-deps-macos.outcome == 'success')
              run: |
                  export LOG_TO_FILE="true"
                  export EIM_FILE_PATH="../test-bin/eim"
                  export EIM_VERSION="eim ${{ env.CLI_TAG }}"
                  export IDF_VERSION="${{ env.IDF_TAG }}"
                  cd tests
                  npm run basic-test

            - name: Run IDF extended install test script (non-Windows)
              if: |
                  runner.os != 'Windows' && 
                  matrix.run_on != 'CNRunner' &&
                  (steps.install-deps-ubuntu.outcome == 'success' ||
                  steps.install-deps-macos.outcome == 'success')
              run: |
                  export LOG_TO_FILE="true"
                  export EIM_FILE_PATH="../test-bin/eim"
                  export EIM_VERSION="eim ${{ env.CLI_TAG }}"
                  export IDF_VERSION="${{ env.IDF_TAG }}"
                  cd tests
                  npm run extended-test

            - name: Run IDF installation from alternative mirrors
              if: matrix.run_on == 'CNRunner'
              run: |
                  export LOG_TO_FILE="true"
                  export EIM_FILE_PATH="../test-bin/eim"
                  export EIM_VERSION="eim ${{ env.CLI_TAG }}"
                  export IDF_VERSION="${{ env.IDF_TAG }}"
                  cd tests
                  npm ci
                  npm run mirrors-test

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Get CLI application version number (Windows)
              if: runner.os == 'Windows'
              run: |
                  git fetch --tags
                  $LATEST_TAG = (git tag --sort=-creatordate | Select-Object -First 1)
                  $STRIPPED_TAG = $LATEST_TAG -replace '^v', ''
                  echo "CLI_TAG=$STRIPPED_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append

            - name: Fetch latest IDF release
              if: runner.os == 'Windows'
              run: |
                  curl -s https://api.github.com/repos/espressif/esp-idf/releases/latest -o IDF_latest_release.json
                  $IDF_TAG = (Get-Content IDF_latest_release.json | ConvertFrom-Json).tag_name
                  echo "IDF_TAG=$IDF_TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
                  echo "Latest IDF for default install: $IDF_TAG"

            - name: Extract artifact (Windows)
              id: extract-artifact-windows
              if: runner.os == 'Windows'
              run: |
                  mkdir -p test-bin
                  7z x ./artifacts/eim-${{ inputs.run_id }}-${{ matrix.package_name }}/eim.zip -otest-bin
                  # 7z x ./test-bin/eim.zip -otest-bin

            - name: Run prerequisites test script (Windows)
              id: pre-test-windows
              if: runner.os == 'Windows'
              run: |
                  $env:LOG_TO_FILE="true"
                  $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
                  $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
                  Set-Location -Path "./tests"
                  Expand-Archive node_modules.zip
                  npm run pre-test
                  npm run pre-install

            - name: Install dependencies (Windows)
              id: install-deps-windows
              if: |
                  runner.os == 'windows' &&
                  (success() || steps.pre-test-windows.outcome == 'failure' &&
                  steps.extract-artifact-windows.outcome == 'success')
              run: |
                  choco install ninja -y

            - name: Run IDF basic install test script (Windows)
              id: basic-test-windows
              if: |
                  runner.os == 'Windows' &&
                  steps.install-deps-windows.outcome == 'success'
              run: |
                  $env:LOG_TO_FILE="true"
                  $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
                  $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
                  $env:IDF_VERSION = "${{ env.IDF_TAG }}"
                  Set-Location -Path "./tests"
                  npm run basic-test

            - name: Run IDF extended install test script (Windows)
              if: |
                  runner.os == 'Windows' &&
                  steps.install-deps-windows.outcome == 'success'
              run: |
                  $env:LOG_TO_FILE="true"
                  $env:EIM_FILE_PATH = "..\test-bin\eim.exe"
                  $env:EIM_VERSION = "eim ${{ env.CLI_TAG }}"
                  $env:IDF_VERSION = "${{ env.IDF_TAG }}"
                  Set-Location -Path "./tests"
                  npm run extended-test

            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-${{ matrix.package_name }}-${{matrix.run_on}}.zip
                  path: |
                      ./tests/results-*.json
                      ./tests/test.log

    publish-test-results:
        name: Automated Test Results
        needs: test
        runs-on: ubuntu-latest
        if: always()

        steps:
            - name: Publish Test Results
              uses: dorny/test-reporter@v1
              with:
                  artifact: /test-results-(.*)/
                  name: "Auto Tests $1"
                  path: "*.json"
                  reporter: mocha-json
                  fail-on-empty: "true"

    # publish-test-results:
    #     name: Automated Test Results
    #     needs: test
    #     runs-on: ubuntu-latest
    #     if: always()

    #     steps:
    #         - name: Download Artifacts
    #           uses: actions/download-artifact@v4
    #           with:
    #               path: ./artifacts

    #         - name: Publish Test Results
    #           uses: EnricoMi/publish-unit-test-result-action@v2
    #           with:
    #               action_fail: true
    #               files: "./artifacts/**/*.xml"
